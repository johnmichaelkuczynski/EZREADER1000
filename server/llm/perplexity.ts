import { ProcessTextOptions } from './openai';

const API_URL = 'https://api.perplexity.ai/chat/completions';

export async function processTextWithPerplexity(options: ProcessTextOptions): Promise<string> {
  const { text, instructions, contentSource, useContentSource } = options;
  
  let systemPrompt = "Be precise and concise. Transform the provided text according to the instructions.";
  let userContent = `Instructions: ${instructions}\n\nText to transform:\n${text}`;
  
  if (useContentSource && contentSource) {
    userContent += `\n\nAdditional content source for reference:\n${contentSource}`;
  }
  
  const messages = [
    { role: "system", content: systemPrompt },
    { role: "user", content: userContent }
  ];
  
  try {
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY || ""}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: "llama-3.1-sonar-small-128k-online",
        messages,
        temperature: 0.2,
        top_p: 0.9,
        max_tokens: 4000,
        stream: false,
        presence_penalty: 0,
        frequency_penalty: 1
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Perplexity API error: ${response.status} - ${errorText}`);
    }
    
    const data = await response.json();
    return data.choices[0].message.content;
  } catch (error) {
    console.error("Perplexity processing error:", error);
    throw new Error(`Failed to process text with Perplexity: ${error.message}`);
  }
}

export async function detectAIWithPerplexity(text: string): Promise<{ isAI: boolean; confidence: number; details: string }> {
  const systemPrompt = "You are an AI content detection expert. Analyze the text and determine if it was likely generated by AI. Return a JSON object with these fields: isAI (boolean), confidence (number between 0 and 1), and details (string with explanation).";
  
  try {
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY || ""}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: "llama-3.1-sonar-small-128k-online",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: text }
        ],
        temperature: 0.2,
        top_p: 0.9,
        max_tokens: 1000,
        stream: false
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Perplexity API error: ${response.status} - ${errorText}`);
    }
    
    const data = await response.json();
    const content = data.choices[0].message.content;
    
    let result: any = { isAI: false, confidence: 0.5, details: "Analysis failed" };
    
    try {
      // Try to extract JSON from the response
      const matches = content.match(/\{[\s\S]*\}/);
      if (matches && matches[0]) {
        result = JSON.parse(matches[0]);
      }
    } catch (parseError) {
      console.error("Failed to parse Perplexity JSON response:", parseError);
      // Extract information from the text response as fallback
      result.details = content;
      result.isAI = content.toLowerCase().includes("ai generated") || 
                    content.toLowerCase().includes("written by ai");
    }
    
    return {
      isAI: Boolean(result.isAI),
      confidence: Math.max(0, Math.min(1, result.confidence || 0.5)),
      details: result.details || "No analysis details provided"
    };
  } catch (error) {
    console.error("Perplexity detection error:", error);
    throw new Error(`Failed to detect AI with Perplexity: ${error.message}`);
  }
}
