import OpenAI from 'openai';

// Initialize DeepSeek client (uses OpenAI-compatible API)
const deepseek = new OpenAI({
  baseURL: 'https://api.deepseek.com',
  apiKey: process.env.DEEPSEEK_API_KEY
});

// PURE HOMEWORK SOLVER - NO REWRITE LOGIC
export async function solveHomeworkWithDeepSeek(assignment: string): Promise<string> {
  try {
    const response = await deepseek.chat.completions.create({
      model: "deepseek-chat",
      messages: [
        { 
          role: "system", 
          content: "You are an expert tutor and academic assistant. Solve the following assignment thoroughly and step-by-step. Provide complete solutions, not just explanations. For math problems, show all work and provide final answers. For written questions, provide comprehensive responses. Actually solve the problems presented."
        },
        { 
          role: "user", 
          content: `Please solve the following assignment completely:\n\n${assignment}`
        }
      ],
      max_tokens: 4000,
      temperature: 0.7,
    });
    return response.choices[0]?.message?.content || '';
  } catch (error: any) {
    console.error("DeepSeek homework solving error:", error);
    throw new Error(`Failed to solve homework with DeepSeek: ${error.message}`);
  }
}

// REGULAR REWRITE MODE: Standard processing for normal-sized documents
export async function processTextWithDeepSeek(
  text: string, 
  instructions: string, 
  contentSource?: string, 
  styleSource?: string, 
  examMode: boolean = false
): Promise<string> {
  
  const maxTokens = 4000;
  
  // For homework mode, use the homework solver instead
  if (instructions.includes("I am a teacher creating solution keys")) {
    return solveHomeworkWithDeepSeek(text);
  }
  
  // REGULAR REWRITE MODE: Standard processing for normal-sized documents
  // Protect math formulas before processing
  const { processedText, mathBlocks } = protectMathFormulas(text);
  
  let systemPrompt = examMode 
    ? "You are an expert academic writer and examination specialist. Transform the provided text according to the given instructions while maintaining academic rigor and examination standards. Ensure all content is accurate, well-structured, and appropriate for academic assessment."
    : "You are an expert writer and editor. Transform the provided text according to the given instructions while maintaining clarity, coherence, and quality. Preserve any important information and ensure the output is well-structured and engaging.";

  let userContent = `Instructions: ${instructions}\n\nText to transform:\n${processedText}`;
  
  // Add content source if provided
  if (contentSource?.trim()) {
    userContent += `\n\nReference material to incorporate:\n${contentSource}`;
  }
  
  // Add style source if provided
  if (styleSource?.trim()) {
    userContent += `\n\nStyle reference (match this writing style):\n${styleSource}`;
  }

  try {
    const response = await deepseek.chat.completions.create({
      model: "deepseek-chat",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userContent }
      ],
      max_tokens: maxTokens,
      temperature: 0.7,
    });

    let result = response.choices[0]?.message?.content || '';
    
    // Restore protected math formulas
    result = restoreMathFormulas(result, mathBlocks);
    
    return result;
  } catch (error: any) {
    console.error("DeepSeek text processing error:", error);
    throw new Error(`Failed to process text with DeepSeek: ${error.message}`);
  }
}

// AI detection using DeepSeek
export async function detectAIWithDeepSeek(text: string): Promise<{ isAI: boolean; confidence: number; details: string }> {
  try {
    const response = await deepseek.chat.completions.create({
      model: "deepseek-chat",
      messages: [
        {
          role: "system",
          content: "You are an AI text detection expert. Analyze the given text and determine if it was likely generated by AI. Respond with a JSON object containing: isAI (boolean), confidence (0-1), and details (string explanation)."
        },
        {
          role: "user",
          content: `Analyze this text for AI generation patterns:\n\n${text}`
        }
      ],
      max_tokens: 500,
      temperature: 0.1,
    });

    const result = response.choices[0]?.message?.content || '';
    
    try {
      const parsed = JSON.parse(result);
      return {
        isAI: parsed.isAI || false,
        confidence: parsed.confidence || 0,
        details: parsed.details || 'Analysis completed'
      };
    } catch {
      // Fallback if JSON parsing fails
      const isAI = result.toLowerCase().includes('ai-generated') || result.toLowerCase().includes('artificial intelligence');
      return {
        isAI,
        confidence: 0.5,
        details: 'Basic pattern analysis completed'
      };
    }
  } catch (error: any) {
    console.error("DeepSeek AI detection error:", error);
    throw new Error(`Failed to detect AI with DeepSeek: ${error.message}`);
  }
}

// Helper functions for math formula protection
function protectMathFormulas(text: string): { processedText: string; mathBlocks: string[] } {
  const mathBlocks: string[] = [];
  let processedText = text;
  
  // Protect display math
  processedText = processedText.replace(/\\\[([\s\S]*?)\\\]/g, (match) => {
    const index = mathBlocks.length;
    mathBlocks.push(match);
    return `__MATH_DISPLAY_${index}__`;
  });
  
  processedText = processedText.replace(/\$\$([\s\S]*?)\$\$/g, (match) => {
    const index = mathBlocks.length;
    mathBlocks.push(match);
    return `__MATH_DISPLAY_${index}__`;
  });
  
  // Protect inline math
  processedText = processedText.replace(/\\\(([\s\S]*?)\\\)/g, (match) => {
    const index = mathBlocks.length;
    mathBlocks.push(match);
    return `__MATH_INLINE_${index}__`;
  });
  
  processedText = processedText.replace(/\$([^$\n]+)\$/g, (match) => {
    const index = mathBlocks.length;
    mathBlocks.push(match);
    return `__MATH_INLINE_${index}__`;
  });
  
  return { processedText, mathBlocks };
}

function restoreMathFormulas(text: string, mathBlocks: string[]): string {
  let result = text;
  
  mathBlocks.forEach((mathBlock, index) => {
    result = result.replace(`__MATH_DISPLAY_${index}__`, mathBlock);
    result = result.replace(`__MATH_INLINE_${index}__`, mathBlock);
  });
  
  return result;
}